{
    // http://eslint.org/docs/rules/
    "parserOptions": {
        "ecmaVersion": 2015,
        "sourceType": "module",
        "ecmaFeatures": {
            "binaryLiterals": false, // enable binary literals
            "blockBindings": false, // enable let and const (aka block bindings)
            "defaultParams": false, // enable default function parameters
            "forOf": false, // enable for-of loops
            "generators": false, // enable generators
            "objectLiteralComputedProperties": false, // enable computed object literal property names
            "objectLiteralDuplicateProperties": false, // enable duplicate object literal properties in strict mode
            "objectLiteralShorthandMethods": false, // enable object literal shorthand methods
            "objectLiteralShorthandProperties": false, // enable object literal shorthand properties
            "octalLiterals": false, // enable octal literals
            "regexUFlag": false, // enable the regular expression u flag
            "regexYFlag": false, // enable the regular expression y flag
            "templateStrings": false, // enable template strings
            "unicodeCodePointEscapes": false, // enable code point escapes
            "jsx": false // enable JSX
        }
    },
    "env": {
        "browser": true, // browser global variables.
        "amd": true
    },
    "rules": {
        ////////// Possible Errors //////////
        "comma-dangle": [
            "error",
            {
                "arrays": "only-multiline",
                "objects": "only-multiline",
                "imports": "only-multiline",
                "exports": "only-multiline",
                "functions": "never"
            }
        ],
        "no-cond-assign": "error", // disallow assignment in conditional expressions
        "no-console": [
            "warn",
            {
                "allow": [
                    "warn",
                    "error"
                ]
            }
        ], // disallow use of console (off by default in the node environment)
        "no-constant-condition": [
            "error",
            {
                "checkLoops": false
            }
        ], // disallow use of constant expressions in conditions
        "no-control-regex": "off", // disallow control characters in regular expressions
        "no-debugger": "error", // disallow use of debugger
        "no-dupe-keys": "error", // disallow duplicate keys when creating object literals
        "no-empty": "off", // disallow empty statements
        "no-empty-class": "off", // disallow the use of empty character classes in regular expressions
        "no-ex-assign": "off", // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast": "off", // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": "off", // disallow unnecessary parentheses (off by default)
        "no-extra-semi": "error", // disallow unnecessary semicolons
        "no-func-assign": "error", // disallow overwriting functions written as function declarations
        "no-inner-declarations": "error", // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": "error", // disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": "error", // disallow irregular whitespace outside of strings and comments
        "no-negated-in-lhs": "error", // disallow negation of the left operand of an in expression
        "no-obj-calls": "error", // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces": "error", // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays": "warn", // disallow sparse arrays
        "no-unreachable": "error", // disallow unreachable statements after a return, throw, continue, or break statement
        "use-isnan": "error", // disallow comparisons with the value NaN
        "valid-jsdoc": [
            "error",
            { // Ensure JSDoc comments are valid (off by default)
                "requireReturn": false
            }
        ],
        "valid-typeof": "error", // Ensure that the results of typeof are compared against a valid string
        ////////// Best Practices //////////
        "block-scoped-var": "error", // treat var statements as if they were block scoped (off by default)
        "complexity": "off", // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "consistent-return": "off", // require return statements to either always or never specify values
        "curly": "error", // specify curly brace conventions for all control statements
        "default-case": "error", // require default case in switch statements (off by default)
        "dot-notation": "off", // encourages use of dot notation whenever possible
        "eqeqeq": [
            "error",
            "allow-null"
        ], // require the use of === and !==
        "guard-for-in": "error", // make sure for-in loops have an if statement (off by default)
        "no-alert": "warn", // disallow the use of alert, confirm, and prompt
        "no-caller": "off", // disallow use of arguments.caller or arguments.callee
        "no-div-regex": "error", // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-else-return": "error", // disallow else after a return in an if (off by default)
        "no-empty-label": "off", // disallow use of labels for anything other then loops and switches
        "no-eq-null": "error", // disallow comparisons to null without a type-checking operator (off by default)
        "no-eval": "error", // disallow use of eval()
        "no-extend-native": "off", // disallow adding to native types
        "no-extra-bind": "error", // disallow unnecessary function binding
        "no-fallthrough": "warn", // disallow fallthrough of case statements
        "no-floating-decimal": "error", // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-implied-eval": "error", // disallow use of eval()-like methods
        "no-iterator": "off", // disallow usage of __iterator__ property
        "no-labels": "error", // disallow use of labeled statements
        "no-lone-blocks": "error", // disallow unnecessary nested blocks
        "no-loop-func": "warn", // disallow creation of functions within loops
        "no-multi-spaces": "error", // disallow use of multiple spaces
        "no-multi-str": "off", // disallow use of multiline strings
        "no-native-reassign": "error", // disallow reassignments of native objects
        "no-new": "off", // disallow use of new operator when not part of the assignment or comparison
        "no-new-func": "off", // disallow use of new operator for Function object
        "no-new-wrappers": "off", // disallows creating new instances of String, Number, and Boolean
        "no-octal": "error", // disallow use of octal literals
        "no-octal-escape": "error", // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-process-env": "error", // disallow use of process.env (off by default)
        "no-proto": "off", // disallow usage of __proto__ property
        "no-redeclare": "error", // disallow declaring the same variable more then once
        "no-return-assign": "error", // disallow use of assignment in return statement
        "no-script-url": "error", // disallow use of javascript: urls.
        "no-self-compare": "error", // disallow comparisons where both sides are exactly the same (off by default)
        "no-sequences": "warn", // disallow use of comma operator
        "no-unused-expressions": "error", // disallow usage of expressions in statement position
        "no-void": "off", // disallow use of void operator (off by default)
        "no-warning-comments": "off", // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
        "no-with": "error", // disallow use of the with statement
        "radix": "error", // require use of the second argument for parseInt() (off by default)
        "vars-on-top": "off", // requires to declare all vars on top of their containing scope (off by default)
        "wrap-iife": "error", // require immediate function invocation to be wrapped in parentheses (off by default)
        "yoda": "off", // require or disallow Yoda conditions
        ////////// Strict Mode //////////
        "strict": "warn", // controls location of Use Strict Directives
        ////////// Variables //////////
        "no-catch-shadow": "off", // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-delete-var": "off", // disallow deletion of variables
        "no-label-var": "off", // disallow labels that share a name with a variable
        "no-shadow": "error", // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": "error", // disallow shadowing of names such as arguments
        "no-undef": "error", // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef-init": "off", // disallow use of undefined when initializing variables
        "no-undefined": "off", // disallow use of undefined variable (off by default)
        "no-unused-vars": "off", // disallow declaration of variables that are not used in the code
        "no-use-before-define": [
            "error",
            {
                "functions": false,
                "classes": true
            }
        ], // disallow use of variables before they are defined
        ////////// Stylistic Issues //////////
        "brace-style": [
            "error",
            "1tbs",
            {
                "allowSingleLine": true
            }
        ], // enforce one true brace style (off by default)
        "camelcase": "off", // require camel case names
        "comma-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ], // enforce spacing before and after comma
        "comma-style": [
            "error",
            "last"
        ], // enforce one true comma style (off by default)
        "consistent-this": [
            "error",
            "self",
            "that"
        ], // enforces consistent naming when capturing the current execution context (off by default)
        "eol-last": "error", // enforce newline at the end of file, with no multiple empty lines
        "func-names": "off", // require function expressions to have a name (off by default)
        "func-style": "off", // enforces use of function declarations or expressions (off by default)
        "key-spacing": "error", // enforces spacing between keys and values in object literal properties
        "max-nested-callbacks": "off", // specify the maximum depth callbacks can be nested (off by default)
        "new-cap": "off", // require a capital letter for constructors
        "new-parens": "error", // disallow the omission of parentheses when invoking a constructor with no arguments
        "no-array-constructor": "off", // disallow use of the Array constructor
        "no-inline-comments": "off", // disallow comments inline after code (off by default)
        "no-lonely-if": "warn", // disallow if as the only statement in an else block (off by default)
        "no-mixed-spaces-and-tabs": "error", // disallow mixed spaces and tabs for indentation
        "no-multiple-empty-lines": "error", // disallow multiple empty lines (off by default)
        "no-nested-ternary": "error", // disallow nested ternary expressions (off by default)
        "no-new-object": "off", // disallow use of the Object constructor
        "semi-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ], // disallow space before semicolon
        "no-spaced-func": "off", // disallow space between function identifier and application
        "no-ternary": "off", // disallow the use of ternary operators (off by default)
        "no-trailing-spaces": "error", // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": "off", // disallow dangling underscores in identifiers
        "no-wrap-func": "off", // disallow wrapping of non-IIFE statements in parens
        "one-var": "off", // allow just one var statement per function (off by default)
        "operator-assignment": "off", // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "padded-blocks": "off", // enforce padding within blocks (off by default)
        "quote-props": [
            "warn",
            "as-needed",
            {
                "keywords": true,
                "unnecessary": false
            }
        ], // require quotes around object literal property names (off by default)
        "quotes": [
            "error",
            "double",
            {
                "avoidEscape": true,
                "allowTemplateLiterals": true
            }
        ], // specify whether double or single quotes should be used
        "semi": [
            "error",
            "always"
        ], // require or disallow use of semicolons instead of ASI
        "sort-vars": "off", // sort variables within the same declaration block (off by default)
        "space-before-function-paren": [
            "error",
            {
                "anonymous": "always",
                "named": "never"
            }
        ], // require a space before function paren (off by default)
        "keyword-spacing": "error", // require a space after certain keywords (off by default)
        "space-before-blocks": [
            "error",
            "always"
        ], // require or disallow space before blocks (off by default)
        "space-in-brackets": "off", // require or disallow spaces inside brackets (off by default)
        "space-in-parens": "off", // require or disallow spaces inside parentheses (off by default)
        "space-infix-ops": [
            "error",
            {
                "int32Hint": false
            }
        ], // require spaces around operators
        "space-unary-ops": [
            "error",
            {
                "words": true,
                "nonwords": false
            }
        ], // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "spaced-line-comment": "off", // require or disallow a space immediately following the // in a line comment (off by default)
        "wrap-regex": "error", // require regex literals to be wrapped in parentheses (off by default)
        ////////// ECMAScript 6 //////////
        // Disallow a bunch of ES6 that this version of ESLint can natively parse
        "no-restricted-syntax": [
            "error",
            {
                "selector": "TemplateLiteral",
                "message": "Template literals are disallowed in Mailchimp's Dojo environment."
            },
            {
                "selector": "TaggedTemplateExpression",
                "message": "Tagged template literals are disallowed in Mailchimp's Dojo environment."
            },
            {
                "selector": "VariableDeclaration[kind=const]",
                "message": "const declarations are disallowed in Mailchimp's Dojo environment."
            },
            {
                "selector": "VariableDeclaration[kind=let]",
                "message": "let declarations are disallowed in Mailchimp's Dojo environment."
            },
            {
                "selector": "ArrowFunctionExpression",
                "message": "Arrow functions are disallowed in Mailchimp's Dojo environment."
            },
            {
                "selector": "ForOfStatement",
                "message": "For...of statements are disallowed in Mailchimp's Dojo environment."
            },
            {
                "selector": "Property[method=true]",
                "message": "Object method expressions are disallowed in Mailchimp's Dojo environment."
            },
            {
                "selector": "Property[shorthand=true]",
                "message": "Object shorthand expressions are disallowed in Mailchimp's Dojo environment."
            },
            {
                "selector": "AssignmentProperty",
                "message": "Default arguments are disallowed in Mailchimp's Dojo environment."
            },
            {
                "selector": "ObjectPattern",
                "message": "Object destructuring is disallowed in Mailchimp's Dojo environment."
            },
            {
                "selector": "ArrayPattern",
                "message": "Array destructuring is disallowed in Mailchimp's Dojo environment."
            }
        ],
        "no-var": "off", // require let or const instead of var (off by default)
        "generator-star-spacing": "off" // enforce the position of the * in generator functions (off by default)
    }
}